#!/usr/bin/env python
"""
Debug de la d√©tection de sortie
"""
import os
import django

os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'ediligence.settings')
django.setup()

from core.models import Presence, Agent, AgentLocation, Bureau
from django.utils import timezone
from datetime import timedelta

def debug_sortie():
    print("=" * 60)
    print("DEBUG D√âTECTION DE SORTIE")
    print("=" * 60)
    
    # 1. V√©rifier la pr√©sence
    today = timezone.now().date()
    presence = Presence.objects.filter(
        agent__user__username='franckalain',
        date_presence=today
    ).first()
    
    if not presence:
        print("\n‚ùå Aucune pr√©sence trouv√©e pour franckalain aujourd'hui")
        return
    
    print(f"\n‚úÖ Pr√©sence trouv√©e:")
    print(f"   Date: {presence.date_presence}")
    print(f"   Heure arriv√©e: {presence.heure_arrivee}")
    print(f"   Heure d√©part: {presence.heure_depart}")
    print(f"   Sortie d√©tect√©e: {presence.sortie_detectee}")
    print(f"   Statut: {presence.statut}")
    
    # 2. V√©rifier l'agent
    agent = presence.agent
    print(f"\n‚úÖ Agent: {agent.user.username}")
    print(f"   Nom: {agent.nom} {agent.prenom}")
    print(f"   Bureau: {agent.bureau}")
    
    if not agent.bureau:
        print("\n‚ùå PROBL√àME: Agent n'a pas de bureau assign√©!")
        print("   Solution: Assigner un bureau √† l'agent")
        return
    
    bureau = agent.bureau
    print(f"\n‚úÖ Bureau: {bureau.nom}")
    print(f"   Coordonn√©es: {bureau.latitude_centre}, {bureau.longitude_centre}")
    print(f"   Rayon: {bureau.rayon_metres}m")
    
    # 3. V√©rifier les positions GPS
    locations = AgentLocation.objects.filter(
        agent__username='franckalain',
        timestamp__date=today
    ).order_by('timestamp')
    
    print(f"\n‚úÖ Positions GPS aujourd'hui: {locations.count()}")
    
    if locations.count() == 0:
        print("\n‚ùå PROBL√àME: Aucune position GPS enregistr√©e!")
        return
    
    # 4. Analyser les positions
    from core.geofencing_utils import calculate_distance
    
    print("\nüìç Analyse des positions:")
    for loc in locations:
        distance = calculate_distance(
            float(loc.latitude),
            float(loc.longitude),
            float(bureau.latitude_centre),
            float(bureau.longitude_centre)
        )
        status = "‚úÖ PROCHE" if distance <= 200 else "‚ùå LOIN"
        print(f"   {loc.timestamp.strftime('%H:%M:%S')} - {distance:.1f}m - {status}")
    
    # 5. V√©rifier si Celery tourne
    print("\nüîç V√©rification Celery:")
    print("   Ex√©cutez: sudo systemctl status celery")
    print("   Ou: celery -A ediligence inspect active")
    
    # 6. Tester manuellement la t√¢che
    print("\nüß™ Test manuel de la t√¢che:")
    print("   from core.tasks_presence import check_agent_exits")
    print("   check_agent_exits()")
    
    print("\n" + "=" * 60)

if __name__ == '__main__':
    debug_sortie()
