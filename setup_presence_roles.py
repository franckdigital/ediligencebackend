#!/usr/bin/env python
"""
Script pour configurer les r√¥les de gestion des pr√©sences
"""
import os
import django
import sys

# Configuration Django
sys.path.append(os.path.dirname(os.path.abspath(__file__)))
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'ediligence.settings')
django.setup()

from django.contrib.auth.models import User
from core.models import UserProfile, Service, Direction

def setup_presence_management_roles():
    """Configurer les r√¥les pour la gestion des pr√©sences"""
    print("üîß Configuration des r√¥les de gestion des pr√©sences...")
    
    # Cr√©er des exemples d'utilisateurs avec les nouveaux r√¥les
    roles_config = [
        {
            'username': 'directeur_general',
            'email': 'directeur.general@ediligence.ci',
            'first_name': 'Jean',
            'last_name': 'KOUAME',
            'role': 'DIRECTEUR',
            'description': 'Directeur G√©n√©ral - Peut g√©rer toutes les pr√©sences'
        },
        {
            'username': 'sous_directeur_rh',
            'email': 'sous.directeur.rh@ediligence.ci',
            'first_name': 'Marie',
            'last_name': 'TRAORE',
            'role': 'SOUS_DIRECTEUR',
            'description': 'Sous-Directeur RH - Peut g√©rer les pr√©sences de sa direction'
        },
        {
            'username': 'chef_service_admin',
            'email': 'chef.service.admin@ediligence.ci',
            'first_name': 'Pierre',
            'last_name': 'OUATTARA',
            'role': 'CHEF_SERVICE',
            'description': 'Chef de Service Administration - Peut g√©rer les pr√©sences de son service'
        }
    ]
    
    # R√©cup√©rer ou cr√©er une direction et un service de test
    direction, created = Direction.objects.get_or_create(
        nom="Direction G√©n√©rale",
        defaults={'description': 'Direction G√©n√©rale de l\'organisation'}
    )
    
    service, created = Service.objects.get_or_create(
        nom="Service Administration",
        defaults={
            'description': 'Service Administration et RH',
            'direction': direction
        }
    )
    
    print(f"üìç Direction: {direction.nom}")
    print(f"üìç Service: {service.nom}")
    
    for role_config in roles_config:
        # Cr√©er ou r√©cup√©rer l'utilisateur
        user, created = User.objects.get_or_create(
            username=role_config['username'],
            defaults={
                'email': role_config['email'],
                'first_name': role_config['first_name'],
                'last_name': role_config['last_name'],
                'is_staff': True,
                'is_active': True
            }
        )
        
        if created:
            user.set_password('password123')  # Mot de passe par d√©faut
            user.save()
            print(f"‚úÖ Utilisateur cr√©√©: {user.username}")
        else:
            print(f"üë§ Utilisateur existant: {user.username}")
        
        # Cr√©er ou mettre √† jour le profil
        profile, created = UserProfile.objects.get_or_create(
            user=user,
            defaults={
                'role': role_config['role'],
                'service': service,
                'matricule': f"MAT{user.id:04d}"
            }
        )
        
        if not created:
            profile.role = role_config['role']
            profile.service = service
            profile.save()
        
        print(f"   R√¥le: {profile.role}")
        print(f"   Service: {profile.service.nom if profile.service else 'Aucun'}")
        print(f"   Description: {role_config['description']}")
        print()
    
    print("üìä R√©sum√© des permissions de gestion des pr√©sences:")
    print("=" * 60)
    print("üîπ ADMIN: Peut g√©rer toutes les pr√©sences")
    print("üîπ DIRECTEUR: Peut g√©rer toutes les pr√©sences de sa direction")
    print("üîπ SOUS_DIRECTEUR: Peut g√©rer les pr√©sences de sa direction")
    print("üîπ CHEF_SERVICE: Peut g√©rer les pr√©sences de son service")
    print("üîπ SUPERIEUR: Peut voir les pr√©sences (lecture seule)")
    print("üîπ AGENT: Peut seulement pointer sa propre pr√©sence")
    print()
    
    print("üéØ Fonctionnalit√©s disponibles pour les gestionnaires:")
    print("- Modifier le statut pr√©sent/absent via switch web")
    print("- √âditer les heures d'arriv√©e, d√©part et sortie")
    print("- Recevoir des notifications de sorties automatiques")
    print("- R√©activer le bouton 'Pointer D√©part' sur mobile")
    print()
    
    print("‚úÖ Configuration termin√©e avec succ√®s!")

def test_permissions():
    """Tester les permissions des diff√©rents r√¥les"""
    print("\nüß™ Test des permissions...")
    
    roles_to_test = ['ADMIN', 'DIRECTEUR', 'SOUS_DIRECTEUR', 'CHEF_SERVICE', 'SUPERIEUR', 'AGENT']
    
    for role in roles_to_test:
        can_modify = role in ['ADMIN', 'DIRECTEUR', 'SOUS_DIRECTEUR', 'CHEF_SERVICE']
        status = "‚úÖ Peut modifier" if can_modify else "‚ùå Lecture seule"
        print(f"   {role}: {status}")

if __name__ == "__main__":
    print("üöÄ CONFIGURATION DES R√îLES DE GESTION DES PR√âSENCES")
    print("=" * 60)
    
    try:
        setup_presence_management_roles()
        test_permissions()
    except Exception as e:
        print(f"‚ùå Erreur: {e}")
        import traceback
        traceback.print_exc()
