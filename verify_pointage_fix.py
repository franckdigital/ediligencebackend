#!/usr/bin/env python
"""
Script de v√©rification des corrections appliqu√©es
"""

def verify_fixes():
    """V√©rifier que les corrections ont √©t√© appliqu√©es"""
    
    print("üîç V√âRIFICATION DES CORRECTIONS APPLIQU√âES")
    print("=" * 50)
    
    try:
        with open('core/views.py', 'r', encoding='utf-8') as f:
            content = f.read()
        
        checks = []
        
        # V√©rification 1: Message d'avertissement corrig√©
        if 'aucune configuration GPS trouv√©e pour le bureau' in content:
            checks.append("‚úÖ Message d'avertissement corrig√©")
        else:
            checks.append("‚ùå Message d'avertissement non corrig√©")
        
        # V√©rification 2: Utilisation des coordonn√©es du bureau
        if 'bureau.latitude_centre' in content and 'bureau.longitude_centre' in content:
            checks.append("‚úÖ Utilisation des coordonn√©es du bureau")
        else:
            checks.append("‚ùå Coordonn√©es du bureau non utilis√©es")
        
        # V√©rification 3: Rayon configurable
        if 'bureau.rayon_metres' in content:
            checks.append("‚úÖ Rayon configurable impl√©ment√©")
        else:
            checks.append("‚ùå Rayon configurable non impl√©ment√©")
        
        # V√©rification 4: Messages d'erreur am√©lior√©s
        if 'bureau.nom' in content and 'distance' in content and 'rayon_autorise' in content:
            checks.append("‚úÖ Messages d'erreur am√©lior√©s")
        else:
            checks.append("‚ùå Messages d'erreur non am√©lior√©s")
        
        # V√©rification 5: Pas de duplication
        distance_count = content.count('distance = haversine(lat1, lon1, lat2, lon2)')
        if distance_count <= 2:  # Une fois dans SimplePresenceView, une fois dans PresenceViewSet
            checks.append("‚úÖ Duplication supprim√©e")
        else:
            checks.append(f"‚ùå Duplication encore pr√©sente ({distance_count} occurrences)")
        
        print("\nüìã R√âSULTATS DE LA V√âRIFICATION:")
        for check in checks:
            print(f"  {check}")
        
        success_count = sum(1 for check in checks if check.startswith("‚úÖ"))
        total_count = len(checks)
        
        print(f"\nüéØ SCORE: {success_count}/{total_count} corrections appliqu√©es")
        
        if success_count == total_count:
            print("\nüéâ TOUTES LES CORRECTIONS ONT √âT√â APPLIQU√âES AVEC SUCC√àS !")
            print("\nüì± Le syst√®me de pointage est maintenant op√©rationnel avec :")
            print("  ‚úÖ Validation de distance bas√©e sur les coordonn√©es du bureau")
            print("  ‚úÖ Rayon configurable via l'interface admin")
            print("  ‚úÖ Messages d'erreur d√©taill√©s")
            print("  ‚úÖ Liaison GPS Admin ‚Üí Mobile fonctionnelle")
            
            print("\nüîó APIs de pointage disponibles :")
            print("  - POST /api/simple-presence/ (API principale)")
            print("  - POST /api/presences/ (API avanc√©e)")
            
            print("\n‚öôÔ∏è Configuration via :")
            print("  - Interface web: /coordonnees-gps")
            print("  - API: /api/bureaux/")
        else:
            print("\n‚ö†Ô∏è  Certaines corrections n√©cessitent une v√©rification manuelle")
        
    except Exception as e:
        print(f"‚ùå Erreur lors de la v√©rification: {e}")

if __name__ == "__main__":
    verify_fixes()
