#!/usr/bin/env python3
"""
Script pour tester manuellement la d√©tection de g√©ofencing
Usage: python test_geofencing_manual.py
"""
import os
import sys
import django
from datetime import datetime, timedelta, time

# Configuration Django
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'ediligencebackend.settings')
django.setup()

from django.utils import timezone
from django.contrib.auth.models import User
from core.models import (
    GeofenceSettings, AgentLocation, GeofenceAlert, 
    Bureau, UserProfile
)
from core.geofencing_tasks import check_geofence_violations

def create_test_scenario():
    """Cr√©er un sc√©nario de test pour simuler le probl√®me"""
    print("üß™ CR√âATION D'UN SC√âNARIO DE TEST")
    print("=" * 50)
    
    # R√©cup√©rer l'utilisateur test
    try:
        user = User.objects.get(email='test@test.com')
        print(f"‚úÖ Utilisateur: {user.username}")
    except User.DoesNotExist:
        print("‚ùå Utilisateur test@test.com non trouv√©")
        return
    
    # R√©cup√©rer le bureau
    bureau = Bureau.objects.first()
    if not bureau:
        print("‚ùå Aucun bureau trouv√©")
        return
    
    print(f"‚úÖ Bureau: {bureau.nom}")
    print(f"   Coordonn√©es: {bureau.latitude_centre}, {bureau.longitude_centre}")
    
    # Cr√©er des positions de test simulant le probl√®me
    maintenant = timezone.now()
    
    # Position 1: Dans la zone (il y a 10 minutes)
    pos1_time = maintenant - timedelta(minutes=10)
    pos1 = AgentLocation.objects.create(
        agent=user,
        latitude=bureau.latitude_centre,  # M√™me position que le bureau
        longitude=bureau.longitude_centre,
        timestamp=pos1_time,
        dans_zone_autorisee=True
    )
    print(f"üìç Position 1 cr√©√©e: {pos1_time.strftime('%H:%M:%S')} - DANS LA ZONE")
    
    # Position 2: Hors de la zone (il y a 8 minutes) - 300m du bureau
    pos2_time = maintenant - timedelta(minutes=8)
    # D√©caler de ~300m (approximativement 0.003 degr√©s)
    pos2_lat = float(bureau.latitude_centre) + 0.003
    pos2_lon = float(bureau.longitude_centre) + 0.003
    
    pos2 = AgentLocation.objects.create(
        agent=user,
        latitude=pos2_lat,
        longitude=pos2_lon,
        timestamp=pos2_time,
        dans_zone_autorisee=False
    )
    print(f"üìç Position 2 cr√©√©e: {pos2_time.strftime('%H:%M:%S')} - HORS ZONE (~300m)")
    
    # Position 3: Toujours hors de la zone (il y a 6 minutes)
    pos3_time = maintenant - timedelta(minutes=6)
    pos3 = AgentLocation.objects.create(
        agent=user,
        latitude=pos2_lat,
        longitude=pos2_lon,
        timestamp=pos3_time,
        dans_zone_autorisee=False
    )
    print(f"üìç Position 3 cr√©√©e: {pos3_time.strftime('%H:%M:%S')} - TOUJOURS HORS ZONE")
    
    # Position 4: Toujours hors de la zone (maintenant)
    pos4 = AgentLocation.objects.create(
        agent=user,
        latitude=pos2_lat,
        longitude=pos2_lon,
        timestamp=maintenant,
        dans_zone_autorisee=False
    )
    print(f"üìç Position 4 cr√©√©e: {maintenant.strftime('%H:%M:%S')} - TOUJOURS HORS ZONE")
    
    return user, bureau

def test_manual_detection():
    """Tester manuellement la d√©tection"""
    print("\nüîç TEST MANUEL DE LA D√âTECTION")
    print("=" * 50)
    
    # V√©rifier la configuration
    settings = GeofenceSettings.objects.first()
    if not settings:
        print("‚ùå Aucune configuration de g√©ofencing")
        return
    
    print(f"‚öôÔ∏è  Configuration:")
    print(f"   Distance d'alerte: {settings.distance_alerte_metres}m")
    print(f"   Dur√©e minimale: {settings.duree_minimale_hors_bureau_minutes} minutes")
    
    # Ex√©cuter la t√¢che de v√©rification
    print(f"\nüöÄ Ex√©cution de la t√¢che de v√©rification...")
    
    try:
        violations_count = check_geofence_violations()
        print(f"‚úÖ T√¢che ex√©cut√©e: {violations_count} nouvelles alertes cr√©√©es")
    except Exception as e:
        print(f"‚ùå Erreur lors de l'ex√©cution: {e}")
        import traceback
        traceback.print_exc()
    
    # V√©rifier les alertes cr√©√©es
    print(f"\nüìã V√©rification des alertes r√©centes:")
    recent_alerts = GeofenceAlert.objects.filter(
        timestamp_alerte__gte=timezone.now() - timedelta(minutes=5)
    ).order_by('-timestamp_alerte')
    
    if recent_alerts.exists():
        for alert in recent_alerts:
            print(f"üö® Alerte: {alert.agent.username} - {alert.type_alerte}")
            print(f"   Distance: {alert.distance_metres}m")
            print(f"   Heure: {alert.timestamp_alerte.strftime('%H:%M:%S')}")
            print(f"   Statut: {alert.statut}")
    else:
        print("‚ùå Aucune alerte r√©cente trouv√©e")

def cleanup_test_data():
    """Nettoyer les donn√©es de test"""
    print(f"\nüßπ NETTOYAGE DES DONN√âES DE TEST")
    print("=" * 50)
    
    try:
        user = User.objects.get(email='test@test.com')
        
        # Supprimer les positions de test r√©centes
        recent_positions = AgentLocation.objects.filter(
            agent=user,
            timestamp__gte=timezone.now() - timedelta(minutes=15)
        )
        count_pos = recent_positions.count()
        recent_positions.delete()
        print(f"üóëÔ∏è  {count_pos} positions de test supprim√©es")
        
        # Supprimer les alertes de test r√©centes
        recent_alerts = GeofenceAlert.objects.filter(
            agent=user,
            timestamp_alerte__gte=timezone.now() - timedelta(minutes=15)
        )
        count_alerts = recent_alerts.count()
        recent_alerts.delete()
        print(f"üóëÔ∏è  {count_alerts} alertes de test supprim√©es")
        
    except Exception as e:
        print(f"‚ùå Erreur lors du nettoyage: {e}")

def main():
    """Fonction principale"""
    print("üîß OUTIL DE TEST G√âOFENCING MANUEL")
    print("=" * 60)
    
    while True:
        print(f"\nOptions disponibles:")
        print("1. Cr√©er un sc√©nario de test")
        print("2. Tester la d√©tection manuelle")
        print("3. Nettoyer les donn√©es de test")
        print("4. Diagnostic complet")
        print("5. Quitter")
        
        choice = input("\nChoisissez une option (1-5): ").strip()
        
        if choice == '1':
            create_test_scenario()
        elif choice == '2':
            test_manual_detection()
        elif choice == '3':
            cleanup_test_data()
        elif choice == '4':
            # Ex√©cuter le script de diagnostic
            from debug_test_user_geofencing import debug_test_user_geofencing
            debug_test_user_geofencing()
        elif choice == '5':
            print("üëã Au revoir!")
            break
        else:
            print("‚ùå Option invalide")

if __name__ == "__main__":
    main()
